FUN=mean, na.rm=TRUE)
aggregate(NYc$Employees, by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
IM <- aggregate(NYc$Employees, by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeMean")
IM
IM <- aggregate(NYc$Employees, by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeMean")
IM
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
e+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
e+coord_flip()
ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
ggplot(IM,aes(IM$EmployeeMean))+geom_bar()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
e <- ggplot(IM,aes(IM$EmployeeMean))+geom_bar()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
e+coord_flip()
ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
e+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e+coord_flip()
p <- ggplot(NY,aes(NY$Industry, NY$Employees))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
p+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e+coord_flip()
par(mfrow=c(2,1))
p <- ggplot(NY,aes(NY$Industry, NY$Employees))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
p+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e+coord_flip()
p <- ggplot(NY,aes(NY$Industry, NY$Employees))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
p<-p+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e<-e+coord_flip()
multiplot(p,e)
multiplot(p,e,cols=1)
library(ggplot2)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees")]
IM <- aggregate(NYc$Employees, by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeMean")
par(mfrow=c(2,1))
p <- ggplot(NY,aes(NY$Industry, NY$Employees))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
p<-p+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e<-e+coord_flip()
multiplot(p,e,cols=1)
grid.arrange(p,e ncol=1)
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees")]
IM <- aggregate(NYc$Employees, by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeMean")
par(mfrow=c(2,1))
p <- ggplot(NY,aes(NY$Industry, NY$Employees))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
p<-p+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e<-e+coord_flip()
grid.arrange(p,e ncol=1)
grid.arrange(p,e, ncol=1)
grid.arrange(p,e, ncol=2)
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees")]
IM <- aggregate(NYc$Employees, by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
IM
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc$Employees, by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
IM
aggregate(c(NYc$Employees,NYc$Revenue), by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
aggregate(NYc$Employees, by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees")]
IM <- aggregate(NYc$Employees, by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeMean")
par(mfrow=c(2,1))
p <- ggplot(NY,aes(NY$Industry, NY$Employees))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
p+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e+coord_flip()
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=mean, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum)
IM
16649123/58.43860
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum)
IM
p <- ggplot(NY,aes(NY$Industry, NY$Employees))+geom_boxplot()+scale_y_log10()+theme_classic()+labs(title="Employees by Industry in NY", x="Industry", y="Employee Counts (Log Scale)")
p+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$EmployeeMean))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Employee Means")
e+coord_flip()
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Rev per Employee (000's)")
e+coord_flip()
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Rev per Employee (000's)")
e+coord_flip()
mean(IM$RevPerEmp)
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Rev per Employee (000's)")+geom_hline(mean(IM$RevPerEmp), linetype="dashed",
color = "red", size=2)
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Average Employees by Industry in NY", x="Industry", y="Rev per Employee (000's)")
e+coord_flip()+geom_hline(mean(IM$RevPerEmp), linetype="dashed",
color = "red", size=2)
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "red", size=2)
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "blue", size=1)
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "green", size=1)
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = mean(IM$RevPerEmp), vjust = -1))
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), vjust = -1))
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), vjust = -1),color = "green")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), vjust = -1),color = "red")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), vjust = 1),color = "red")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), vjust = -10),color = "red")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), xjust=10, vjust = -1),color = "red")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=10, vjust = -1),color = "red")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=50, vjust = -1),color = "red")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=-1, vjust = -1),color = "red")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=-1, vjust = -1),color = "black")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0)+"NY Mean", hjust=-1, vjust = -1),color = "black")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=-1, vjust = -1),color = "black")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=-0.5, vjust = -1),color = "black")
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=-0.5, vjust = -1),color = "black")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = round(mean(IM$RevPerEmp),0), hjust=-0.5, vjust = -1),color = "blue")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average)", hjust=-0.5, vjust = -1),color = "blue")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
paste(round(mean(IM$RevPerEmp),0),"NY Average")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.5, vjust = -1),color = "blue")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.5, vjust = -1, color = "blue")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0, vjust = -1, color = "blue")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.1, vjust = -1, color = "blue")
state <- count(inc, "State")
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module1/Data/inc5000_data.csv", header= TRUE)
state <- count(inc, "State")
library(plyr)
library(ggplot2)
state <- count(inc, "State")
state
state[order(state[,1],decreasing=TRUE)
state[order(state[,1],decreasing=TRUE)]
state[,1]
state[,2]
state[order(state[,2],decreasing=TRUE)]
state
state[order(state[,2],decreasing=TRUE),]
state <- count(inc, "State")
freq<-state[order(state[,2],decreasing=TRUE),]
barplot(freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,50), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
state[order(state[,2],decreasing=TRUE),]
state <- count(inc, "State")
state<-state[order(state[,2],decreasing=TRUE),]
state
barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,50), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
state <- count(inc, "State")
state<-state[order(state[,2],decreasing=FALSE),]
barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,50), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
state <- count(inc, "State")
state<-state[order(state[,2],decreasing=FALSE),]
barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.5, ylim = c(0,50), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,40), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,60), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
library(plyr)
library(ggplot2)
state <- count(inc, "State")
state<-state[order(state[,2],decreasing=FALSE),]
barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,60), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
dot_plot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,60), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
c<-barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,60), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
dotchart(c)
library(plyr)
library(ggplot2)
state <- count(inc, "State")
state<-state[order(state[,2],decreasing=FALSE),]
barplot(state$freq, ylab= "States", xlab="Companies per State", horiz=TRUE, beside = TRUE, space=0.1, ylim = c(0,60), yaxp=c(0,5,1),
names.arg=state$State, cex.names=0.5, las=1)
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM
IM[order(IM[,4],decreasing=FALSE),]
IM
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM <- IM[order(IM[,4],decreasing=FALSE),]
IM
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM <- IM[order(IM[,4],decreasing=TRUE),]
IM
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.1, vjust = -1, color = "blue")
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM <- IM[order(IM[,4],decreasing=TRUE),]
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.1, vjust = -1, color = "blue")
incc <- inc[c("Industry","Employees","Revenue")]
IM <- aggregate(incc[c("Employees","Revenue")], by=list(incc$Industry),
FUN=sum, na.rm=TRUE)
IM
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM
IM <- IM[order(IM[,4],decreasing=TRUE),]
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.1, vjust = -1, color = "blue")
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"Nationwide Average")), hjust=-0.1, vjust = -1, color = "blue")
library(ggplot2)
library(gridExtra)
incc <- inc[c("Industry","Employees","Revenue")]
IM <- aggregate(incc[c("Employees","Revenue")], by=list(incc$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM <- IM[order(IM[,4],decreasing=TRUE),]
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"Nationwide Average")), hjust=-0.1, vjust = -1, color = "blue")
A <- matrix(c(1,2,3,4,-1,0,1,3,0,1,-2,1,5,4,-2,-3), nrow = 4)
A
rankMatrix(A)
qr(A)
B <- matrix(c(1,2,1,3,6,3,2,4,2), nrow = 3)
qr(B)
A <- matrix(c(1,2,3,4,-1,0,1,3,0,1,-2,1,5,4,-2,-3), nrow = 4)
qr(A)
B <- matrix(c(1,2,1,3,6,3,2,4,2), nrow = 3)
qr(B)
$$\begin{array}
A <- matrix(c(1,2,3,4,-1,0,1,3,0,1,-2,1,5,4,-2,-3), nrow = 4)
qr(A)
B <- matrix(c(1,2,1,3,6,3,2,4,2), nrow = 3)
qr(B)
A <- matrix(c(1,2,3,0,4,5,0,0,6), nrow = 3)
A
eigen(A)
A <- matrix(c(1,2,3,0,4,5,0,0,6), nrow = 3)
eigen(A)
install.packages("datashader")
install.packages("datashader")
install.packages(c("BH", "knitr", "MASS", "mgcv", "nlme", "rlang", "rpart", "stringr"))
A <- matrix(c(1,2,3,-1,0,4), nrow = 2)
A
EX = eigen(X)
A <- matrix(c(1,2,3,-1,0,4), nrow = 2)
# Then transpose matrix A using t()
AT <- t(A)
AT
# Multiply the transposed matrix A by matrix A
Y<- AT %*% A
Y
# Multiply A by transposed matrix A (AA^T)
X<- A %*% AT
X
# compute eigenvalues and eigenvectors
EX = eigen(X)
EY = eigen(Y)
EX
EY
svd(A)
SA <- svd(A)
cbind(EX$vectors, SA$u)
#As you can see the first two columns are the Evectors of X and the right are the left singular for A
cbind(EX$vectors, SA$u)
#As you can see the first two columns are the Evectors of X and the right are the right singular for A
cbind(EY$vectors, SA$v)
svd$d
SA$d
cbind(sqrt(EX$values), SA$d)
A <- matrix(c(2,3,6,6,3,5,5,8,9),nrow=3)
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each element
Vij <- A[-i,-j]
I[i,j] <- ((-1)^(i+j))*det(Pij)
}
}
#Use the transpose of the created matrix C and the determinant of the input matrix A to get the inverse
return(t(C)/det(A))
}
#Test the Function
A
myinverse(A)
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each element
Vij <- A[-i,-j]
I[i,j] <- ((-1)^(i+j))*det(Vij)
}
}
#Use the transpose of the created matrix C and the determinant of the input matrix A to get the inverse
return(t(C)/det(A))
}
#Test the Function
A
myinverse(A)
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each element
Vij <- A[-i,-j]
I[i,j] <- ((-1)^(i+j))*det(Vij)
}
}
#Use the transpose of the created matrix C and the determinant of the input matrix A to get the inverse
return(t(I)/det(A))
}
inverse(A)
myinverse(A)
myinverse(A)*A
myinverse(A)*%*A
myinverse(A)%*%A
B=myinverse(A)
A%*%B
#althought the values are in scinotation you can see the 1's along the diagonal and zero/near zero in the other cells.
i=1
j=1
A[1,j]
A[-1,-j]
A[-i,-j]
A[-i,-j-1]
A
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each cell in the matrix
Mmini <- A[-i,-j]
#-1 raised to a power provides the appropriate signs as the mini det is calculated for the 2x2s
I[i,j] <- ((-1)^(i+j))*det(Mmini)
}
}
#finish the calculation by dividing by the det of A
return(t(I)/det(A))
}
B=myinverse(A)
A%*%B
shiny::runApp('Documents/GitHub/data608/Project3/Interactive')
shiny::runApp('Documents/GitHub/data608/Project3/Interactive')
MyData <- read.csv(file="~/Documents/GitHub/data608/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv",
header=TRUE, sep=",")
runApp('Documents/GitHub/data608/Project3/Interactive')
library(shiny)
library(ggplot2)
# Define UI for application that plots Question 1 and Question 2
library(shiny)
library(ggplot2)
library(dplyr)
MyData <- read.csv(file="~/Documents/GitHub/data608/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv",
header=TRUE, sep=",")
runApp('Documents/GitHub/data608/Project3/Interactive')
shiny::runApp('Documents/GitHub/data608/Project3/Interactive')
MyData <- read.csv(text=getURL("https://raw.githubusercontent.com/cspitmit03/data608/master/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv",
header=TRUE, sep=","))
install.packages("RCurl")
runApp('Documents/GitHub/data608/Project3/Interactive')
MyData <- read.csv(text=getURL("https://raw.githubusercontent.com/cspitmit03/data608/master/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv",
header=TRUE, sep=","))
runApp('Documents/GitHub/data608/Project3/Interactive')
MyData <- read.csv(text=getURL("https://raw.githubusercontent.com/cspitmit03/data608/master/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv"),
header=TRUE, sep=",")
getURL("https://raw.githubusercontent.com/cspitmit03/data608/master/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv")
require(RCurl)
getURL("https://raw.githubusercontent.com/cspitmit03/data608/master/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv")
read.csv(text=getURL("https://raw.githubusercontent.com/cspitmit03/data608/master/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv"),
header=TRUE, sep=",")
runApp('Documents/GitHub/data608/Project3/Interactive')
MyData <- read.csv(text=getURL("https://raw.githubusercontent.com/cspitmit03/data608/master/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv"),
header=TRUE, sep=",")
runApp('Documents/GitHub/data608/Project3/Interactive')
